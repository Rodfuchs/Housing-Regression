# evaluate.py
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score, mean_absolute_percentage_error

def evaluate_model(model, X, y):
    y_pred = model.predict(X)
    metrics = {
        "MAE": mean_absolute_error(y, y_pred),
        "RMSE": mean_squared_error(y, y_pred, squared=False),
        "MAPE (%)": mean_absolute_percentage_error(y, y_pred) * 100,
        "R2": r2_score(y, y_pred)
    }
    return metrics

if __name__ == "__main__":
    import pandas as pd
    from sklearn.model_selection import train_test_split
    from train import train_model
    from preprocessing import build_preprocessor

    # Cargar datos
    url = "https://drive.google.com/file/d/1RhzfCilHDItdcvkMr3kddINn76n4gHTg/view?usp=sharing"
    path = 'https://drive.google.com/uc?export=download&id=' + url.split('/')[-2]
    data = pd.read_csv(path)
    data.drop(['FireplaceQu', 'MasVnrType', 'Alley','PoolQC', 'Fence', 'MiscFeature','Id'], axis=1, inplace=True)

    X = data
    y = X.pop('SalePrice')

    # Split
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=31416)

    # train
    model = train_model(X_train, y_train)

    # Evaluate
    train_metrics = evaluate_model(model, X_train, y_train)
    test_metrics = evaluate_model(model, X_test, y_test)
    print("Train metrics:", train_metrics)
    print("Test metrics:", test_metrics)
